<h1><%= @model.friendly_name %></h1>
<table class="table">
  <tr>
    <td width="15%"><strong>Filepath</strong></td>
    <td><%= @model.filepath %></td>
  </tr>
  <tr>
    <td><strong>Tarball</strong></td>
    <td><%= model_s3_link @model %></td>
  </tr>
  <tr>
    <td><strong>Upload</strong></td>
    <td>
      <form action="/models/<%= @model.id %>/upload" method="POST" enctype="multipart/form-data" style="margin-bottom:0">
        <div class="fileupload fileupload-new" data-provides="fileupload" style="margin-bottom:0">
          <div class="input-append" style="margin-bottom:0">
            <div class="uneditable-input span3"><i class="icon-file fileupload-exists"></i> <span class="fileupload-preview"></span></div><span class="btn btn-file"><span class="fileupload-new">Select file</span><span class="fileupload-exists">Change</span><input type="file" name="file" /></span><a href="#" class="btn fileupload-exists" data-dismiss="fileupload">Remove</a>
            <button class="btn btn-primary" type="submit">Upload</button>
          </div>
        </div>
      </form>
    </td>
  <tr>
    <td><strong>Request Test</strong></td>
    <td>
      <% unless @model.s3_key.nil? %>
      <form action="/models/<%= @model.id %>/run" method="POST" style="margin-bottom:0;display:inline;">
        <input type="hidden" name="test_type" value="CORRECTNESS"/>
        <button class="btn" type="submit">Correctness</button>
      </form>
      <form action="/models/<%= @model.id %>/run" method="POST" style="margin-bottom:0;display:inline;">
        <input type="hidden" name="test_type" value="PERFORMANCE"/>
        <button class="btn" type="submit">Performance</button>
      </form>
      <% end %>
    </td>
  </tr>
</table>

<h3>Runtime Performance</h3>
<div id="runtime-performance-graph" class="well">
</div>

<h3>Test Runs</h3>
<table class="table table-hover table-condensed">
  <thead>
    <tr>
      <th>&nbsp;</th>
      <th>Test Type</th>
      <th>Requested At</th>
      <th>Started At</th>
      <th>Return Code</th>
      <th>Duration</th>
      <th>Tarball Link</th>
    </tr>
  </thead>

  <% @test_results.each do |t| %>
    <tr class="<%= test_result_row_class t %>">
      <td>
        <%= test_result_icon t %>
      </td>
      <td><%= test_type t %></td>
      <td><%= pretty_timestamp t.requested_at %></td>
      <td><%= pretty_timestamp t.started_at %></td>
      <td><%= t.return_code %></td>
      <td><%= pretty_duration t.runtime_seconds %></td>
      <td><%= test_result_s3_link t %></td>
    </tr>
  <% end %>
</table>

<script>
  test_run_data = <%= test_run_data_array(@model.test_results.where(:completed => true)) %>;

  $(document).ready(function() {
    var w = 900;
    var h = 320;
    var xpadding = 50;
    var ypadding = 20;

    var graph = d3.select("#runtime-performance-graph")
                  .insert("svg")
                  .attr("class", "chart")
                  .attr("width", w)
                  .attr("height", h);
    var xmin = d3.min(test_run_data, function(d) { return d.datetime; });
    var xmax = d3.max(test_run_data, function(d) { return d.datetime; });
    var ymin = d3.min(test_run_data, function(d) { return d.runtime_seconds; });
    var ymax = d3.max(test_run_data, function(d) { return d.runtime_seconds; });
    var xscale = d3.scale.linear()
                         .domain([xmin, xmax])
                         .range([xpadding, w - xpadding])
                         .nice();
    var yscale = d3.scale.linear()
                         .domain([0, ymax])
                         .range([h - ypadding, ypadding])
                         .nice();
    var xaxis = d3.svg.axis()
                      .scale(xscale)
                      .orient("bottom")
                      .tickFormat(function(datetime) {
                        return d3.time.format("%Y-%m-%d")(new Date(datetime));
                      });
    var yaxis = d3.svg.axis()
                      .scale(yscale)
                      .orient("left");
    var line = d3.svg.line()
                     .x(function(d) { return xscale(d.datetime); })
                     .y(function(d) { return yscale(d.runtime_seconds); });
    graph.append("g")
         .classed("axis", true)
         .attr("transform", "translate(0," + (h - ypadding) + ")")
         .call(xaxis);
    graph.append("g")
         .classed("axis", true)
         .attr("transform", "translate(" + xpadding + ",0)")
         .call(yaxis);
         
    graph.append("g")
         .append("path")
         .classed("connector", true)
         .attr("d", line(test_run_data));

    graph.selectAll("circle")
         .data(test_run_data)
         .enter()
         .append("circle")
         .attr("cx", function(d) {
           return xscale(d.datetime);
         })
         .attr("cy", function(d) {
          return yscale(d.runtime_seconds);
         })
         .attr("r", 7.5)
         .attr("class", function(d) {
           return (d.correct == 1) ? "correct" : "incorrect";
         })
         .insert("title")
         .text(function(d) {
           var tooltip = (d.correct == 1) ? "Correct" : "Incorrect";
           tooltip += "\n";
           tooltip += d.runtime_seconds + "s";
           return tooltip;
         });
  });
</script>
