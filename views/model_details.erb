<h1><%= @model.friendly_name %></h1>
<table class="table">
  <tr>
    <td width="15%"><strong>Filepath</strong></td>
    <td><%= @model.filepath %></td>
  </tr>
  <% unless @model.s3_key.nil? %>
  <tr>
    <td><strong>Tarball</strong></td>
    <td><%= model_s3_link @model %></td>
  </tr>
  <% end %>
  <tr>
    <td><strong>Upload</strong></td>
    <td>
      <form action="/models/<%= @model.id %>/upload" method="POST" enctype="multipart/form-data" style="margin-bottom:0">
        <div class="fileupload fileupload-new" data-provides="fileupload" style="margin-bottom:0">
          <div class="input-append" style="margin-bottom:0">
            <div class="uneditable-input span3"><i class="icon-file fileupload-exists"></i> <span class="fileupload-preview"></span></div><span class="btn btn-file"><span class="fileupload-new">Select file</span><span class="fileupload-exists">Change</span><input type="file" name="file" /></span><a href="#" class="btn fileupload-exists" data-dismiss="fileupload">Remove</a>
            <button class="btn btn-primary" type="submit">Upload</button>
          </div>
        </div>
      </form>
    </td>
  </tr>
  <% unless @model.s3_key.nil? %>
  <tr>
    <td><strong>Request Test</strong></td>
    <td>
      <form action="/models/<%= @model.id %>/run" method="POST" style="margin-bottom:0;display:inline;">
        <input type="hidden" name="test_type" value="CORRECTNESS"/>
        <button class="btn" type="submit">Correctness</button>
      </form>
      <form action="/models/<%= @model.id %>/run" method="POST" style="margin-bottom:0;display:inline;">
        <input type="hidden" name="test_type" value="PERFORMANCE"/>
        <button class="btn" type="submit">Performance</button>
      </form>
    </td>
  </tr>
  <% end %>
</table>

<h3>Runtime Performance</h3>
<div id="graph-data-filter" class="btn-group" data-toggle="buttons-radio">
  <button id="runtime" type="button" class="btn active">Total</button>
  <button id="cpu_time" type="button" class="btn">CPU</button>
</div>
<div id="runtime-performance-graph" class="well">
</div>

<h3>Test Runs</h3>
<table id="testresults" class="table table-hover table-condensed tablesorter">
  <thead>
    <tr>
      <th data-filter="false">&nbsp;</th>
      <th class="filter-select">Test Type</th>
      <th class="filter-select">Commit</th>
      <th data-filter="false">Requested At</th>
      <th data-filter="false">Started At</th>
      <th>Return Code</th>
      <th>Total</th>
      <th>CPU</th>
      <th data-filter="false" data-sorter="false">Tarball Link</th>
    </tr>
  </thead>

  <% @test_results.each do |t| %>
    <tr class="<%= test_result_row_class t %>" data-id="<%= t.id %>">
      <td data-test-result-type="<%= test_result_status_number t %>">
        <%= test_result_icon t %>
      </td>
      <td><%= test_type t %></td>

      <% if t.commit.nil? %>
        <td>Unknown</td>
      <% else %>
        <td><%= t.commit.sha2_hash[0,7] %>...</td>
      <% end %>

      <% requested_at = t.requested_at ? t.requested_at.to_i : nil %>
      <% started_at = t.started_at ? t.started_at.to_i : nil %>
      <td data-test-time="<%= requested_at %>"><%= pretty_timestamp t.requested_at %></td>
      <td data-test-time="<%= started_at %>"><%= pretty_timestamp t.started_at %></td>
      <td><%= t.return_code %></td>
      <td style="text-align:right;padding-right:10px" data-duration="<%= t.runtime_seconds %>">
        <%= pretty_duration t.runtime_seconds %>
      </td>
      <td style="text-align:right;padding-right:10px" data-duration="<%= t.cpu_time_seconds %>">
        <%= pretty_duration t.cpu_time_seconds %>
      </td>
      <td><%= test_result_s3_link t %></td>
    </tr>
  <% end %>
</table>

<script>
  <% test_results = @model.test_results.where(
                        :completed => true,
                        :correct => true,
                        :test_type => TestResult::TestTypes::PERFORMANCE
                    ).order(:requested_at) %>
  test_run_data = <%= test_run_data_array(test_results) %>;

  $(document).ready(function() {
    var w = 900;
    var h = 320;
    var xpadding = 50;
    var ypadding = 20;

    var runtime_data = test_run_data.filter(function(element, index, array) {
      return (element.runtime_seconds != null);
    });

    var cpu_time_data = test_run_data.filter(function(element, index, array) {
      return (element.cpu_time_seconds != null);
    });

    // Create the graph svg.
    var graph = d3.select("#runtime-performance-graph")
                  .insert("svg")
                  .attr("class", "chart")
                  .attr("width", w)
                  .attr("height", h);

    // Determine the ranges of the axes.
    var xmin = d3.min(test_run_data, function(d) { return d.datetime; });
    var xmax = d3.max(test_run_data, function(d) { return d.datetime; });
    var ymin = d3.min(test_run_data, function(d) { return d.runtime_seconds; });
    var ymax = d3.max(test_run_data, function(d) { return d.runtime_seconds; });

    // Define scaling functions for the axes.
    var xscale = d3.scale.linear()
                         .domain([xmin, xmax])
                         .range([xpadding, w - xpadding])
                         .nice();
    var yscale = d3.scale.linear()
                         .domain([0, ymax])
                         .range([h - ypadding, ypadding])
                         .nice();

   // Create functions to define axes.
    var xaxis = d3.svg.axis()
                      .scale(xscale)
                      .orient("bottom")
                      .tickFormat(function(datetime) {
                        return d3.time.format("%Y-%m-%d")(new Date(datetime));
                      });
    var yaxis = d3.svg.axis()
                      .scale(yscale)
                      .orient("left");

    // Add the axes to the graph.
    graph.append("g")
         .classed("axis", true)
         .attr("transform", "translate(0," + (h - ypadding) + ")")
         .call(xaxis);
    graph.append("g")
         .classed("axis", true)
         .attr("transform", "translate(" + xpadding + ",0)")
         .call(yaxis);
   
    // Draw the datapoints.
    graph.append("g")
         .classed("runtime_data", true)
         .selectAll("circle")
         .data(runtime_data)
         .enter()
         .append("circle")
         .attr("cx", function(d) {
           return xscale(d.datetime);
         })
         .attr("cy", function(d) {
          return yscale(d.runtime_seconds);
         })
         .attr("r", 7.5)
         .attr("class", function(d) {
           return (d.correct == 1) ? "correct" : "incorrect";
         })
         .insert("title")
         .text(function(d) {
           var tooltip = (d.correct == 1) ? "Correct" : "Incorrect";
           tooltip += "\n";
           tooltip += d.pretty_duration;
           return tooltip;
         });

    graph.append("g")
         .classed("cpu_time_data", true)
         .selectAll("circle")
         .data(cpu_time_data)
         .enter()
         .append("circle")
         .attr("cx", function(d) {
           return xscale(d.datetime);
         })
         .attr("cy", function(d) {
          return yscale(d.cpu_time_seconds);
         })
         .attr("r", 7.5)
         .attr("class", function(d) {
           return (d.correct == 1) ? "correct" : "incorrect";
         })
         .insert("title")
         .text(function(d) {
           var tooltip = (d.correct == 1) ? "Correct" : "Incorrect";
           tooltip += "\n";
           tooltip += d.pretty_duration;
           return tooltip;
         });

         var update_graph_visibility = function(button_id) {
           var show_runtime = (button_id == "runtime");
           var show_cpu_time = (button_id == "cpu_time");

           $("g.cpu_time_data").each(function () {
             if(show_cpu_time) {
               $(this).show();
               } else {
               $(this).hide();
             }
           });

           $("g.runtime_data").each(function () {
             if(show_runtime) {
               $(this).show();
               } else {
               $(this).hide();
             }
           });
         };

         $("#graph-data-filter #runtime").click(update_graph_visibility.bind(undefined, "runtime"));
         $("#graph-data-filter #cpu_time").click(update_graph_visibility.bind(undefined, "cpu_time"));

         update_graph_visibility("runtime");
  });
</script>
